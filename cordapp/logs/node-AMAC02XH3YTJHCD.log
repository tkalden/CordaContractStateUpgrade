[INFO ] 2019-02-11T16:10:27,109Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package patientUseCase in file:/Users/tenzin.kalden/Riskblock/fnolCorda/cordapp/out/test/classes/patientUseCase: build/tmp/generated-test-cordapps/patientUseCase-5848de06-2ea7-4c8b-a95e-59142c341f8b.jar {}
[INFO ] 2019-02-11T16:10:27,392Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package patientUseCase in file:/Users/tenzin.kalden/Riskblock/fnolCorda/cordapp/out/production/classes/patientUseCase: build/tmp/generated-test-cordapps/patientUseCase-8409d199-c57d-4bf9-83a6-6970a89d361a.jar {}
[INFO ] 2019-02-11T16:10:27,472Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/Riskblock/fnolCorda/cordapp/build/tmp/generated-test-cordapps/patientUseCase-5848de06-2ea7-4c8b-a95e-59142c341f8b.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/Riskblock/fnolCorda/cordapp/build/tmp/generated-test-cordapps/patientUseCase-8409d199-c57d-4bf9-83a6-6970a89d361a.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T16:10:27,516Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/Riskblock/fnolCorda/cordapp/build/tmp/generated-test-cordapps/patientUseCase-5848de06-2ea7-4c8b-a95e-59142c341f8b.jar {}
[INFO ] 2019-02-11T16:10:27,622Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/Riskblock/fnolCorda/cordapp/build/tmp/generated-test-cordapps/patientUseCase-8409d199-c57d-4bf9-83a6-6970a89d361a.jar {}
[WARN ] 2019-02-11T16:10:27,991Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T16:10:28,620Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="interface java.security.PublicKey" {}
[INFO ] 2019-02-11T16:10:28,624Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="interface java.security.PrivateKey" {}
[INFO ] 2019-02-11T16:10:28,631Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.lang.Throwable" {}
[INFO ] 2019-02-11T16:10:28,634Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.lang.StackTraceElement" {}
[INFO ] 2019-02-11T16:10:28,638Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.math.BigDecimal" {}
[INFO ] 2019-02-11T16:10:28,642Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.math.BigInteger" {}
[INFO ] 2019-02-11T16:10:28,647Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.util.Currency" {}
[INFO ] 2019-02-11T16:10:28,650Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class net.corda.core.utilities.OpaqueBytesSubSequence" {}
[INFO ] 2019-02-11T16:10:28,653Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.Instant" {}
[INFO ] 2019-02-11T16:10:28,661Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.Duration" {}
[INFO ] 2019-02-11T16:10:28,663Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.LocalDate" {}
[INFO ] 2019-02-11T16:10:28,666Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.LocalDateTime" {}
[INFO ] 2019-02-11T16:10:28,668Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.LocalDate" {}
[INFO ] 2019-02-11T16:10:28,670Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.LocalTime" {}
[INFO ] 2019-02-11T16:10:28,671Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.LocalTime" {}
[INFO ] 2019-02-11T16:10:28,676Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.ZonedDateTime" {}
[INFO ] 2019-02-11T16:10:28,677Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.LocalDateTime" {}
[INFO ] 2019-02-11T16:10:28,679Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.ZoneId" {}
[INFO ] 2019-02-11T16:10:28,681Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.ZoneId" {}
[INFO ] 2019-02-11T16:10:28,684Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.OffsetTime" {}
[INFO ] 2019-02-11T16:10:28,686Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.LocalTime" {}
[INFO ] 2019-02-11T16:10:28,688Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.ZoneId" {}
[INFO ] 2019-02-11T16:10:28,691Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.OffsetDateTime" {}
[INFO ] 2019-02-11T16:10:28,693Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.LocalDateTime" {}
[INFO ] 2019-02-11T16:10:28,695Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.ZoneId" {}
[INFO ] 2019-02-11T16:10:28,697Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.util.Optional" {}
[INFO ] 2019-02-11T16:10:28,699Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.Year" {}
[INFO ] 2019-02-11T16:10:28,701Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.YearMonth" {}
[INFO ] 2019-02-11T16:10:28,703Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.MonthDay" {}
[INFO ] 2019-02-11T16:10:28,705Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.time.Period" {}
[INFO ] 2019-02-11T16:10:28,708Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.lang.Class" {}
[INFO ] 2019-02-11T16:10:28,710Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.security.cert.X509Certificate" {}
[INFO ] 2019-02-11T16:10:28,713Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.security.cert.X509CRL" {}
[INFO ] 2019-02-11T16:10:28,715Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.security.cert.CertPath" {}
[INFO ] 2019-02-11T16:10:28,718Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.lang.StringBuffer" {}
[INFO ] 2019-02-11T16:10:28,721Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.io.InputStream" {}
[INFO ] 2019-02-11T16:10:28,723Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.util.BitSet" {}
[INFO ] 2019-02-11T16:10:28,726Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.util.EnumSet" {}
[INFO ] 2019-02-11T16:10:28,727Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class java.lang.Class" {}
[INFO ] 2019-02-11T16:10:28,730Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class net.corda.core.contracts.ContractAttachment" {}
[INFO ] 2019-02-11T16:10:28,733Z [main] amqp.SerializerFactory.register - action="Registering custom serializer", class="class org.apache.activemq.artemis.api.core.SimpleString" {}
[INFO ] 2019-02-11T16:10:28,945Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.time.Duration, declaredType=java.time.Duration {}
[INFO ] 2019-02-11T16:10:28,948Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.time.Instant, declaredType=java.time.Instant {}
[INFO ] 2019-02-11T16:10:28,981Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.security.PublicKey, declaredType=java.security.PublicKey {}
[INFO ] 2019-02-11T16:10:29,090Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.time.Duration, declaredType=java.time.Duration {}
[INFO ] 2019-02-11T16:10:29,092Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.time.Instant, declaredType=java.time.Instant {}
[INFO ] 2019-02-11T16:10:29,102Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.security.PublicKey, declaredType=java.security.PublicKey {}
[INFO ] 2019-02-11T16:10:29,106Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.security.PublicKey, declaredType=java.security.PublicKey {}
[INFO ] 2019-02-11T16:10:29,110Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.security.PublicKey, declaredType=java.security.PublicKey {}
[INFO ] 2019-02-11T16:10:29,114Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.security.PublicKey, declaredType=java.security.PublicKey {}
[INFO ] 2019-02-11T16:10:29,140Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=net.i2p.crypto.eddsa.EdDSAPublicKey, declaredType=java.security.PublicKey {}
[INFO ] 2019-02-11T16:10:29,182Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.security.cert.X509Certificate, declaredType=java.security.cert.X509Certificate {}
[INFO ] 2019-02-11T16:10:29,187Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.security.cert.X509Certificate, declaredType=java.security.cert.X509Certificate {}
[INFO ] 2019-02-11T16:10:29,191Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=java.security.cert.X509Certificate, declaredType=java.security.cert.X509Certificate {}
[INFO ] 2019-02-11T16:10:29,194Z [main] amqp.SerializerFactory.findCustomSerializer$serialization - action="Using custom serializer", class=sun.security.x509.X509CertImpl, declaredType=java.security.cert.X509Certificate {}
[INFO ] 2019-02-11T18:20:45,647Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package patientUseCase in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/out/test/classes/patientUseCase: build/tmp/generated-test-cordapps/patientUseCase-f1513f46-0c75-414c-8f7f-447f3b3e72fb.jar {}
[INFO ] 2019-02-11T18:20:46,101Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package patientUseCase in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/out/production/classes/patientUseCase: build/tmp/generated-test-cordapps/patientUseCase-d06a5e55-c346-43a8-b0c4-ebbd04f5b355.jar {}
[INFO ] 2019-02-11T18:20:46,169Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-f1513f46-0c75-414c-8f7f-447f3b3e72fb.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-d06a5e55-c346-43a8-b0c4-ebbd04f5b355.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T18:20:46,279Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-f1513f46-0c75-414c-8f7f-447f3b3e72fb.jar {}
[INFO ] 2019-02-11T18:20:46,451Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-d06a5e55-c346-43a8-b0c4-ebbd04f5b355.jar {}
[WARN ] 2019-02-11T18:20:47,078Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:20:51,965Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:20:51,971Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:20:52,224Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3749c6ac {}
[INFO ] 2019-02-11T18:20:52,855Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:20:52,919Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:52,923Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:54,645Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:55,185Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:20:55,187Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:55,197Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:55,286Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:55,288Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:55,444Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:20:55,447Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:20:55,556Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-02-11T18:20:55,711Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:20:55,714Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:20:55,765Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0D9591795BE9D20E7227AAFECCCE037A975ED3D61FF7610D3F5C92AD12B20FEF, not inserting the second time {}
[INFO ] 2019-02-11T18:20:55,839Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:55,860Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:20:55,862Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:55,863Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:55,865Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:20:55,866Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:55,872Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:20:55,874Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:20:55,891Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:20:55,900Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1fc48b16 {}
[INFO ] 2019-02-11T18:20:55,911Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:20:55,913Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:55,914Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:56,075Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:56,084Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:20:56,085Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,090Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,095Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,097Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,150Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:20:56,152Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:20:56,163Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:20:56,166Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:20:56,177Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E53FD0D90C1C9269366EBD238A4D5AD25F51F54C58E5A489003437A95933972B, not inserting the second time {}
[INFO ] 2019-02-11T18:20:56,186Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:56,189Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,200Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:56,202Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,205Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,216Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,218Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,224Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:20:56,225Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,226Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,227Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:20:56,229Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,232Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:20:56,233Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:20:56,250Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:20:56,258Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@60aee4ca {}
[INFO ] 2019-02-11T18:20:56,268Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:20:56,269Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:56,270Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:56,369Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:56,384Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:20:56,385Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,392Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,399Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,401Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,482Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:20:56,484Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:20:56,494Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:20:56,495Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:20:56,507Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DE4A0B582A1D6A97D5DEE742800ECF939468320A803671A40535B0E28717623A, not inserting the second time {}
[INFO ] 2019-02-11T18:20:56,515Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:56,518Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,531Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:56,536Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,542Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,555Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,556Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,559Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,570Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,571Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,573Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,583Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,584Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,589Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:20:56,591Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,593Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,594Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:20:56,595Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,599Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:20:56,600Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:20:56,618Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:20:56,628Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7fbb3144 {}
[INFO ] 2019-02-11T18:20:56,640Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:20:56,642Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:56,644Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:56,747Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:56,755Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:20:56,756Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,760Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,766Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,768Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,820Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:20:56,824Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:20:56,834Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:20:56,836Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:20:56,847Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8553D3225E5098B70D1E3E29FDFBF6F6714EFB2EB129F8C880A208657CBAC3CA, not inserting the second time {}
[INFO ] 2019-02-11T18:20:56,853Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:56,856Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,871Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:56,873Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,876Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,886Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,887Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,889Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,898Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:56,899Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,902Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,911Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,912Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,913Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,921Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:56,922Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,924Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:56,932Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,933Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,940Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:20:56,942Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,943Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,943Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:20:56,944Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:56,946Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:20:56,948Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:20:56,960Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/4/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:20:56,969Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@214c51eb {}
[INFO ] 2019-02-11T18:20:56,977Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:20:56,978Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:56,979Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:57,063Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:20:57,070Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:20:57,072Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,077Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:57,082Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,083Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,136Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:20:57,138Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:20:57,148Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:20:57,150Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:20:57,157Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 246E908F8D0A089343D8A5DFEE4CD5B90EB42CC1E9208508D0FC2C867C768CE5, not inserting the second time {}
[INFO ] 2019-02-11T18:20:57,164Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:57,166Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:57,174Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909255187) {}
[INFO ] 2019-02-11T18:20:57,175Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,177Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:57,184Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,185Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:57,188Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:57,195Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909256085) {}
[INFO ] 2019-02-11T18:20:57,197Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,199Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:57,206Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,208Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:57,210Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:57,219Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909256385) {}
[INFO ] 2019-02-11T18:20:57,221Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,223Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:57,232Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,233Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:57,235Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:57,246Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909256756) {}
[INFO ] 2019-02-11T18:20:57,247Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,250Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:20:57,261Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,263Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,268Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:20:57,269Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,270Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,272Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:20:57,274Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909257072) {}
[INFO ] 2019-02-11T18:20:57,280Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:20:57,281Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:20:57,282Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:20:57,283Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:20:57,772Z [Mock network] flow.[1feb4b97-c463-4909-8a16-065aa63d82de].call - Entered into method call() for create FNOL for initiating party:O=Aetna, L=NY, C=US {}
[INFO ] 2019-02-11T18:20:58,018Z [Mock network] flow.[1feb4b97-c463-4909-8a16-065aa63d82de].initiateSession - Initiating flow session with party O=MetroPlus, L=SAT, C=US. Session id for tracing purposes is SessionId(toLong=-4110407884287748528). {}
[INFO ] 2019-02-11T18:20:58,115Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Aetna, L=NY, C=US. Session id for tracing purposes is SessionId(toLong=-4110407884287748528). {invocation_id=7100f73e-6a34-4c88-9470-3f98ee83631a, invocation_timestamp=2019-02-11T18:20:58.109Z, session_id=7100f73e-6a34-4c88-9470-3f98ee83631a, session_timestamp=2019-02-11T18:20:58.109Z}
[INFO ] 2019-02-11T18:20:58,272Z [Mock network] flow.[1feb4b97-c463-4909-8a16-065aa63d82de].call - Exit method call() for create FNOL for initiating party:O=Aetna, L=NY, C=US {}
[INFO ] 2019-02-11T18:20:58,304Z [Mock network] flow.[1feb4b97-c463-4909-8a16-065aa63d82de].initiateSession - Initiating flow session with party O=MetroPlus, L=SAT, C=US. Session id for tracing purposes is SessionId(toLong=8858724960072682687). {}
[INFO ] 2019-02-11T18:20:58,323Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Aetna, L=NY, C=US. Session id for tracing purposes is SessionId(toLong=8858724960072682687). {actor_id=Only For Testing, actor_owningIdentity=O=Aetna, L=NY, C=US, actor_store_id=TEST, invocation_id=da2853ed-d904-44ab-a50a-a5567db84fd4, invocation_timestamp=2019-02-11T18:20:58.322Z, session_id=da2853ed-d904-44ab-a50a-a5567db84fd4, session_timestamp=2019-02-11T18:20:58.322Z}
[INFO ] 2019-02-11T18:20:58,366Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class patientUseCase.State.PatientState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-02-11T18:20:58,403Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class patientUseCase.State.PatientState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-02-11T18:21:56,530Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package patientUseCase in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/out/test/classes/patientUseCase: build/tmp/generated-test-cordapps/patientUseCase-1d10654f-db08-4a13-934c-d39c2c1145b8.jar {}
[INFO ] 2019-02-11T18:21:56,887Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package patientUseCase in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/out/production/classes/patientUseCase: build/tmp/generated-test-cordapps/patientUseCase-c267db12-ead7-4437-99fb-60afbfd64fdd.jar {}
[INFO ] 2019-02-11T18:21:56,967Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-1d10654f-db08-4a13-934c-d39c2c1145b8.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-c267db12-ead7-4437-99fb-60afbfd64fdd.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T18:21:57,064Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-1d10654f-db08-4a13-934c-d39c2c1145b8.jar {}
[INFO ] 2019-02-11T18:21:57,218Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-c267db12-ead7-4437-99fb-60afbfd64fdd.jar {}
[WARN ] 2019-02-11T18:21:57,832Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:02,483Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:22:02,486Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:22:02,567Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3749c6ac {}
[INFO ] 2019-02-11T18:22:03,193Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:22:03,232Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:03,236Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:05,014Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:05,675Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:22:05,677Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:05,691Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:05,790Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:05,792Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:05,951Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:22:05,954Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:06,045Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-02-11T18:22:06,165Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:22:06,170Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:22:06,217Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 0EA99644E53D90444D2C2BAD4AF2DA9B0986A47EB0D0031188708B36C64BABD9, not inserting the second time {}
[INFO ] 2019-02-11T18:22:06,282Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:06,304Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:06,306Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:06,307Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:06,309Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:06,310Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:06,316Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:22:06,318Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:22:06,336Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:22:06,345Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1fc48b16 {}
[INFO ] 2019-02-11T18:22:06,355Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:22:06,356Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:06,358Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:06,506Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:06,516Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:22:06,518Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:06,522Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:06,528Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:06,529Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:06,592Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:22:06,595Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:06,605Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:22:06,610Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:22:06,621Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C6E1DB673C2875637B54A41499D9F7DD2E256955C7A6D6AB86D3E16B4442E712, not inserting the second time {}
[INFO ] 2019-02-11T18:22:06,631Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:06,634Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:06,648Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:06,649Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:06,653Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:06,667Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:06,669Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:06,679Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:06,681Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:06,682Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:06,684Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:06,685Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:06,690Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:22:06,692Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:22:06,710Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:22:06,721Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@60aee4ca {}
[INFO ] 2019-02-11T18:22:06,733Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:22:06,735Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:06,736Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:06,858Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:06,869Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:22:06,870Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:06,878Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:06,884Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:06,885Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:06,957Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:22:06,958Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:06,967Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:22:06,969Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:22:06,979Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BB447B2D57C3D23B69E5CC70D1775F59E3EB17EC7DA323E469D4153AC3B16472, not inserting the second time {}
[INFO ] 2019-02-11T18:22:06,987Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:06,990Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,004Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:07,005Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,007Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,016Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,017Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:07,019Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,029Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:07,031Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,033Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,044Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,045Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,052Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:07,053Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,055Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,057Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:07,059Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,061Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:22:07,063Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:22:07,082Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:22:07,092Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7fbb3144 {}
[INFO ] 2019-02-11T18:22:07,103Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:22:07,105Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:07,107Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:07,221Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:07,228Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:22:07,229Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,233Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,239Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,241Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,302Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:22:07,304Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:07,316Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:22:07,318Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:22:07,327Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C68EBF994BFFF1FC03675E26E14B7B8BFF47DE47C9397F4F232098F174240066, not inserting the second time {}
[INFO ] 2019-02-11T18:22:07,334Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:07,337Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,347Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:07,348Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,350Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,361Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,363Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:07,365Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,372Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:07,374Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,376Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,385Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,386Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,389Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,397Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,399Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,401Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,411Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,412Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,416Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:07,418Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,418Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,419Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:07,420Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,422Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:22:07,423Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:22:07,437Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/4/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:22:07,448Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@214c51eb {}
[INFO ] 2019-02-11T18:22:07,458Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:22:07,460Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:07,462Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:07,561Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:07,568Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:22:07,569Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,572Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,576Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,577Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,627Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:22:07,630Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:07,638Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:22:07,639Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:22:07,649Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 54BEC89A21C6730356595A34647E7F4D5323FC1D25E320FCFA49FC001BCCB1F0, not inserting the second time {}
[INFO ] 2019-02-11T18:22:07,655Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:07,658Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,666Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909325677) {}
[INFO ] 2019-02-11T18:22:07,667Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,669Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,681Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,683Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:07,685Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,694Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909326518) {}
[INFO ] 2019-02-11T18:22:07,695Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,698Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,708Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,710Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,713Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,721Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909326870) {}
[INFO ] 2019-02-11T18:22:07,723Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,726Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,734Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,735Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,736Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,744Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909327229) {}
[INFO ] 2019-02-11T18:22:07,745Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,747Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:07,754Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,755Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,760Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:07,760Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,761Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,762Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:07,762Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909327569) {}
[INFO ] 2019-02-11T18:22:07,767Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:22:07,768Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:22:07,768Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:22:07,769Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:22:08,162Z [Mock network] flow.[799e797d-98aa-4352-a1d5-506bc753a1a9].call - Entered into method call() for create FNOL for initiating party:O=Aetna, L=NY, C=US {}
[INFO ] 2019-02-11T18:22:08,420Z [Mock network] flow.[799e797d-98aa-4352-a1d5-506bc753a1a9].initiateSession - Initiating flow session with party O=MetroPlus, L=SAT, C=US. Session id for tracing purposes is SessionId(toLong=374602182374904468). {}
[INFO ] 2019-02-11T18:22:08,514Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Aetna, L=NY, C=US. Session id for tracing purposes is SessionId(toLong=374602182374904468). {invocation_id=f0ab4de3-6285-4629-bb8e-36e0ac3709dc, invocation_timestamp=2019-02-11T18:22:08.506Z, session_id=f0ab4de3-6285-4629-bb8e-36e0ac3709dc, session_timestamp=2019-02-11T18:22:08.506Z}
[INFO ] 2019-02-11T18:22:08,671Z [Mock network] flow.[799e797d-98aa-4352-a1d5-506bc753a1a9].call - Exit method call() for create FNOL for initiating party:O=Aetna, L=NY, C=US {}
[INFO ] 2019-02-11T18:22:08,713Z [Mock network] flow.[799e797d-98aa-4352-a1d5-506bc753a1a9].initiateSession - Initiating flow session with party O=MetroPlus, L=SAT, C=US. Session id for tracing purposes is SessionId(toLong=-3043994526143224797). {}
[INFO ] 2019-02-11T18:22:08,738Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Aetna, L=NY, C=US. Session id for tracing purposes is SessionId(toLong=-3043994526143224797). {actor_id=Only For Testing, actor_owningIdentity=O=Aetna, L=NY, C=US, actor_store_id=TEST, invocation_id=2a712b80-8bcc-4f92-acf6-d62c1e1e4f9a, invocation_timestamp=2019-02-11T18:22:08.737Z, session_id=2a712b80-8bcc-4f92-acf6-d62c1e1e4f9a, session_timestamp=2019-02-11T18:22:08.737Z}
[INFO ] 2019-02-11T18:22:08,783Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class patientUseCase.State.PatientState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-02-11T18:22:08,819Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class patientUseCase.State.PatientState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-02-11T18:22:18,389Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package patientUseCase in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/out/test/classes/patientUseCase: build/tmp/generated-test-cordapps/patientUseCase-5a795569-0136-483b-badc-fde27c0530fa.jar {}
[INFO ] 2019-02-11T18:22:18,602Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package patientUseCase in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/out/production/classes/patientUseCase: build/tmp/generated-test-cordapps/patientUseCase-c3ca71cb-53b0-4f78-be4a-1dfb7c7848b0.jar {}
[INFO ] 2019-02-11T18:22:18,658Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-5a795569-0136-483b-badc-fde27c0530fa.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-c3ca71cb-53b0-4f78-be4a-1dfb7c7848b0.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T18:22:18,686Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-5a795569-0136-483b-badc-fde27c0530fa.jar {}
[INFO ] 2019-02-11T18:22:18,767Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-c3ca71cb-53b0-4f78-be4a-1dfb7c7848b0.jar {}
[WARN ] 2019-02-11T18:22:19,099Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:22,050Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:22:22,054Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:22:22,101Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@175ac243 {}
[INFO ] 2019-02-11T18:22:40,048Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package patientUseCase in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/out/test/classes/patientUseCase: build/tmp/generated-test-cordapps/patientUseCase-5ea65b2d-f3b5-4d81-a562-74ee856a8017.jar {}
[INFO ] 2019-02-11T18:22:40,368Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package patientUseCase in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/out/production/classes/patientUseCase: build/tmp/generated-test-cordapps/patientUseCase-bc754b52-a247-4525-bc74-7d5cb5f9da22.jar {}
[INFO ] 2019-02-11T18:22:40,430Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-5ea65b2d-f3b5-4d81-a562-74ee856a8017.jar, rootPackageName=null), RestrictedURL(url=file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-bc754b52-a247-4525-bc74-7d5cb5f9da22.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T18:22:40,508Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-5ea65b2d-f3b5-4d81-a562-74ee856a8017.jar {}
[INFO ] 2019-02-11T18:22:40,683Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/Users/tenzin.kalden/ContractStateUpgrade/cordapp/build/tmp/generated-test-cordapps/patientUseCase-bc754b52-a247-4525-bc74-7d5cb5f9da22.jar {}
[WARN ] 2019-02-11T18:22:41,502Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:46,344Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:22:46,349Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:22:46,424Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4fbed6fc {}
[INFO ] 2019-02-11T18:22:47,132Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:22:47,175Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:47,179Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:49,004Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:49,619Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:22:49,621Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:49,631Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:49,719Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:49,721Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:49,854Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:22:49,856Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:49,943Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[INFO ] 2019-02-11T18:22:50,065Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:22:50,068Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:22:50,111Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C4DDE25C1A96365C22B12C3C4D911CB9D862C496A8E0B917C9A7DBB7F59A446E, not inserting the second time {}
[INFO ] 2019-02-11T18:22:50,174Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:50,193Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:50,194Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:50,196Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:50,198Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:50,200Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:50,206Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:22:50,208Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:22:50,224Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:22:50,234Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@63c5a25d {}
[INFO ] 2019-02-11T18:22:50,245Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:22:50,248Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:50,250Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:50,391Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:50,400Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:22:50,401Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:50,406Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:50,411Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:50,413Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:50,466Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:22:50,468Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:50,477Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:22:50,479Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:22:50,488Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 19016A4F2FBFE226CF547E3036219ED219529442D3C71B96453F3A529CD7BAE5, not inserting the second time {}
[INFO ] 2019-02-11T18:22:50,495Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:50,497Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:50,507Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:50,508Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:50,510Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:50,519Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:50,520Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:50,524Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:50,526Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:50,527Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:50,528Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:50,529Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:50,532Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:22:50,533Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:22:50,549Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:22:50,560Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6a3a3b93 {}
[INFO ] 2019-02-11T18:22:50,571Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:22:50,574Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:50,576Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:50,692Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:50,699Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:22:50,700Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:50,704Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:50,709Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:50,710Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:50,772Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:22:50,773Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:50,784Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:22:50,786Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:22:50,795Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A3C67F9361C496DB71E35EE90AE6945DED4A81826AC3C98040AEB4953F8E8496, not inserting the second time {}
[INFO ] 2019-02-11T18:22:50,803Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:50,805Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:50,817Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:50,818Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:50,821Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:50,833Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:50,835Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:50,838Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:50,849Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:50,850Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:50,852Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:50,864Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:50,867Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:50,874Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:50,875Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:50,876Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:50,877Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:50,879Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:50,883Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:22:50,885Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:22:50,900Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/3/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:22:50,907Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5ea794d2 {}
[INFO ] 2019-02-11T18:22:50,915Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:22:50,917Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:50,918Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:51,022Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:51,031Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:22:51,032Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,036Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,044Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,045Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,100Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:22:51,102Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:51,108Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:22:51,110Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:22:51,118Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9D526018DC0965AB4925E5CA078A73E9B4F993EE7BA978DBB174D432C34509E6, not inserting the second time {}
[INFO ] 2019-02-11T18:22:51,124Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:51,126Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,134Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:51,135Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,137Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,145Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,146Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:51,148Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,155Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:51,156Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,158Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,168Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,169Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:51,172Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,180Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:51,182Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,184Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,192Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,193Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,196Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:51,198Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,199Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,199Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:51,200Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,203Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T18:22:51,204Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T18:22:51,222Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/4/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T18:22:51,231Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4cbeae45 {}
[INFO ] 2019-02-11T18:22:51,241Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T18:22:51,242Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:51,245Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:51,339Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), PatientSchemaV1(name=patientUseCase.PatientSchema.PatientSchema, version=1), PatientSchemaV2(name=patientUseCase.PatientSchema.NewPatientSchema, version=1)] {}
[INFO ] 2019-02-11T18:22:51,346Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T18:22:51,347Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,351Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,355Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,356Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,412Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment CDD834A30D6AF6ED6B3F54CF659BDDC5B640BBB66525E7C045A2B0094F3E3F22 {}
[WARN ] 2019-02-11T18:22:51,413Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T18:22:51,422Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.Initiator to initiate patientUseCase.Responder (version 1) {}
[INFO ] 2019-02-11T18:22:51,423Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[WARN ] 2019-02-11T18:22:51,433Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D3178B760FC497A1FF03099CFE103C9EF8DDAA17FE28568D20C596471B63485B, not inserting the second time {}
[INFO ] 2019-02-11T18:22:51,441Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:51,444Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,455Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549909369620) {}
[INFO ] 2019-02-11T18:22:51,456Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,458Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,469Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,470Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:51,472Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,482Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Aetna, L=NY, C=US], platformVersion=1, serial=1549909370401) {}
[INFO ] 2019-02-11T18:22:51,483Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,486Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,494Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,495Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:51,498Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,508Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetroPlus, L=SAT, C=US], platformVersion=1, serial=1549909370700) {}
[INFO ] 2019-02-11T18:22:51,509Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,511Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,520Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,522Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,523Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,530Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Fidelity, L=WAR, C=US], platformVersion=1, serial=1549909371032) {}
[INFO ] 2019-02-11T18:22:51,532Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,533Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T18:22:51,540Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,541Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,545Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:51,546Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,546Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,547Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T18:22:51,548Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=MetLife, L=NY, C=US], platformVersion=1, serial=1549909371347) {}
[INFO ] 2019-02-11T18:22:51,553Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:22:51,554Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:22:51,555Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:22:51,556Z [main] internal.InternalMockNetwork$MockNode.registerInitiatedFlowInternal - Registered patientUseCase.flow.createPatientFlow to initiate patientUseCase.flow.PatientCreateFlowResponder (version 1) {}
[INFO ] 2019-02-11T18:22:51,956Z [Mock network] flow.[11b1b88d-97d0-4af7-afec-da9a7ddef8b1].call - Entered into method call() for create FNOL for initiating party:O=Aetna, L=NY, C=US {}
[INFO ] 2019-02-11T18:22:52,192Z [Mock network] flow.[11b1b88d-97d0-4af7-afec-da9a7ddef8b1].initiateSession - Initiating flow session with party O=MetroPlus, L=SAT, C=US. Session id for tracing purposes is SessionId(toLong=625235972266929977). {}
[INFO ] 2019-02-11T18:22:52,303Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Aetna, L=NY, C=US. Session id for tracing purposes is SessionId(toLong=625235972266929977). {invocation_id=ad11f7ac-e25e-414f-b31b-6fe9673fec22, invocation_timestamp=2019-02-11T18:22:52.297Z, session_id=ad11f7ac-e25e-414f-b31b-6fe9673fec22, session_timestamp=2019-02-11T18:22:52.297Z}
[INFO ] 2019-02-11T18:22:52,449Z [Mock network] flow.[11b1b88d-97d0-4af7-afec-da9a7ddef8b1].call - Exit method call() for create FNOL for initiating party:O=Aetna, L=NY, C=US {}
[INFO ] 2019-02-11T18:22:52,483Z [Mock network] flow.[11b1b88d-97d0-4af7-afec-da9a7ddef8b1].initiateSession - Initiating flow session with party O=MetroPlus, L=SAT, C=US. Session id for tracing purposes is SessionId(toLong=7215051766510956557). {}
[INFO ] 2019-02-11T18:22:52,504Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Aetna, L=NY, C=US. Session id for tracing purposes is SessionId(toLong=7215051766510956557). {actor_id=Only For Testing, actor_owningIdentity=O=Aetna, L=NY, C=US, actor_store_id=TEST, invocation_id=c607fae3-b8a3-48ee-8061-95af3e4b657f, invocation_timestamp=2019-02-11T18:22:52.503Z, session_id=c607fae3-b8a3-48ee-8061-95af3e4b657f, session_timestamp=2019-02-11T18:22:52.503Z}
[WARN ] 2019-02-11T18:22:52,567Z [Mock network] flow.[1d1c7528-3778-4229-bfa2-ab31b6561ae6].run - Terminated by unexpected exception {}
java.lang.IllegalStateException: Attachment not found for contract: newFNOLUseCase.contract.NewPatientContract
	at net.corda.core.internal.ContractUpgradeUtils.getContractAttachmentId(ContractUpgradeUtils.kt:36) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.internal.ContractUpgradeUtils.assembleUpgradeTx(ContractUpgradeUtils.kt:21) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.ContractUpgradeFlow$Initiate.assembleTx(ContractUpgradeFlow.kt:74) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.AbstractStateReplacementFlow$Instigator.call(AbstractStateReplacementFlow.kt:64) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.AbstractStateReplacementFlow$Instigator.call(AbstractStateReplacementFlow.kt:50) ~[corda-core-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
